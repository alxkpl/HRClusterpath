% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimization.R
\name{hr-clusterpath}
\alias{hr-clusterpath}
\alias{get_cluster}
\alias{HR_Clusterpath}
\title{Clusterpath algorithm for Hüsler-Reiss models}
\usage{
get_cluster(gamma, weights, eps_f, ...)

HR_Clusterpath(data, zeta, lambda, eps_g = 0.001, eps_f = 0.01, it_max = 1000)
}
\arguments{
\item{gamma}{For \code{get_clusters()}, a \eqn{d \times d} matrix : the variogram matrix \eqn{\Gamma}.}

\item{weights}{For \code{get_clusters()}, the \eqn{d \times d} symmetric weightsmatrix with a zero diagonal.}

\item{eps_f}{A positive number : tolerance threshold for merging clusters.}

\item{data}{For \code{HR_Clusterapth()}, a \eqn{n \times d} matrix : the matrix of data.}

\item{zeta}{For \code{HR_Clusterapth()}, a positive number : tuned parameter for the exponential weights.}

\item{lambda}{For \code{get_clusters()}, a positive number : the weight of the penalty.

For \code{HR_Clusterpath()}, a numerix vector of positive number : the grid line for \eqn{\lambda}.}

\item{eps_g}{A positive number : tolerance threshold for the convergence of the gradient descent.}

\item{it_max}{An integer : maximal number of iteration of the gradient descent algorithm.}
}
\value{
\code{HR_Clusterpath()} is a gradient descent from the data with default values and method for
the optimization : the variogram matrix \eqn{\Gamma} is the empirical variogram and the weights are
set as the exponential weights, which depends of only one tuning parameter \eqn{\zeta} and where
we have some theoretical results.

\code{get_clusters()} is a freer version of the previous function. You can use your own estimation for the
variogram \eqn{\Gamma} and customizable weights with the matrix \eqn{W}.

Both of them produce a list of results :
\itemize{
\item $R : the \eqn{R} matrix of the clusters.
\item $clusters : a list of the variable indices, clustered.
\item $nllh : the value of the negative penalised negative loglikelihood.
\item $lambda : the value of lambda.
}

In the case of \code{HR_Clusterpath()} it is a list of the previous list.
}
\description{
Gradient descent based on the Clusterpath algorithm adapted to the likelihood
of a graphical Hüsler-Reiss model. Usefull when the precision matrix \eqn{\Theta}
(or the variogram \eqn{\Gamma}) has a block matrix structure.
}
\details{
The block matrix models is defined from two elements : the cluster's partition
\eqn{\{C_1, \dots, C_K\}}, included in \eqn{V} and the \eqn{R} matrix which belongs
to \eqn{\mathcal S_K(\mathbb R)}, the set of symmetric \eqn{K \times K} matrix (See also
\code{\link{build_theta}()} and \code{\link{extract_R_matrix}()}).

The Clusterpath aims to find optimum of some penalised negative loglikelihood defined in
\code{\link{neg_likelihood_pen}()}.
}
\section{Some results for \code{HR_Clusterpath()}}{


When we get replications \eqn{X_1, \dots, X_n} of a random vector \eqn{X} which
belongs to the attraction domain of a \eqn{K}-block Hüsler-Reiss graphical model, the
minimum of the penalised negative loglikelihood conveges almost surely to the
true precision matrix of the model \eqn{\Theta^*}, for all \eqn{\lambda}, provided that
we choose a sequence \eqn{(\zeta_n)_{n\in \mathbb N^*}} which grows slower than the
\eqn{log(n)} sequence. In general, the \eqn{\zeta \in [1,2]} is a good choice.
}

\examples{
############################################################################
#                            With get_clusters
############################################################################
# Customizable weights
W <- matrix(c(0, 1, 1, 1,
              1, 0, 1, 1,
              1, 1, 0, 1,
              1, 1, 1, 0), nc = 4)

# Free choice of variogram
gamma <- graphicalExtremes::generate_random_Gamma(d = 4)

# Choice of initial condition for the optimization
R <- matrix(c(1, 0, 0, -1,
              0, 1, 1, -2,
              0, 1, 1, -1,
              -1, -2, -1, 1), nc = 4)
lambda <- 2.2

Cluster_HR <- get_cluster(gamma, W, 100)

Cluster_HR(R, 2.2)

############################################################################
#                            With HR_Clusterpath
############################################################################
# Construction of clusters and R matrix for simulation
R <- matrix(c(1, -3, 0,
              -3, 2, -2,
              0, -2, 1), nc = 3)
clusters <- list(1:5, 6:10, 11:15)

# Construction of induced theta and corresponding variogram gamma
Theta <- build_theta(R, clusters)
Gamma <- graphicalExtremes::Theta2Gamma(Theta)

gr3_bal_sim_param_cluster <-
  list(
    R = R,
    clusters = clusters,
    Theta = Theta,
    Gamma = Gamma,
    chi = 1,
    n = 1e3,
    d = 15
  )

# Simulation of the data
set.seed(804)
data <- graphicalExtremes::rmpareto(n = gr3_bal_sim_param_cluster$n,
                                    model = "HR",
                                    par = gr3_bal_sim_param_cluster$Gamma)

# Optimization with Clusterpath algorithm with empirical variogram and exponential weights
lambda <- seq(0, 3, 1e-3)

HR_Clusterpath(data = data,
               zeta = gr3_bal_sim_param_cluster$chi,
               lambda = lambda,
               eps_f = 1e-1)

}
