// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// add_matrices_inplace
void add_matrices_inplace(NumericMatrix& out, const NumericMatrix& A);
RcppExport SEXP _HRClusterpath_add_matrices_inplace(SEXP outSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type out(outSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type A(ASEXP);
    add_matrices_inplace(out, A);
    return R_NilValue;
END_RCPP
}
// crout_decomposition_rcpp
NumericMatrix crout_decomposition_rcpp(NumericMatrix A, double tol);
RcppExport SEXP _HRClusterpath_crout_decomposition_rcpp(SEXP ASEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(crout_decomposition_rcpp(A, tol));
    return rcpp_result_gen;
END_RCPP
}
// distance_matrix
NumericMatrix distance_matrix(int n, Function f);
RcppExport SEXP _HRClusterpath_distance_matrix(SEXP nSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_matrix(n, f));
    return rcpp_result_gen;
END_RCPP
}
// s_optimal
double s_optimal(double s, Function f);
RcppExport SEXP _HRClusterpath_s_optimal(SEXP sSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(s_optimal(s, f));
    return rcpp_result_gen;
END_RCPP
}
// penalty_grad_rcpp
NumericMatrix penalty_grad_rcpp(int K, Function f);
RcppExport SEXP _HRClusterpath_penalty_grad_rcpp(SEXP KSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(penalty_grad_rcpp(K, f));
    return rcpp_result_gen;
END_RCPP
}
// psolve_rcpp
NumericMatrix psolve_rcpp(const NumericMatrix& L_);
RcppExport SEXP _HRClusterpath_psolve_rcpp(SEXP L_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type L_(L_SEXP);
    rcpp_result_gen = Rcpp::wrap(psolve_rcpp(L_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HRClusterpath_add_matrices_inplace", (DL_FUNC) &_HRClusterpath_add_matrices_inplace, 2},
    {"_HRClusterpath_crout_decomposition_rcpp", (DL_FUNC) &_HRClusterpath_crout_decomposition_rcpp, 2},
    {"_HRClusterpath_distance_matrix", (DL_FUNC) &_HRClusterpath_distance_matrix, 2},
    {"_HRClusterpath_s_optimal", (DL_FUNC) &_HRClusterpath_s_optimal, 2},
    {"_HRClusterpath_penalty_grad_rcpp", (DL_FUNC) &_HRClusterpath_penalty_grad_rcpp, 2},
    {"_HRClusterpath_psolve_rcpp", (DL_FUNC) &_HRClusterpath_psolve_rcpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_HRClusterpath(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
